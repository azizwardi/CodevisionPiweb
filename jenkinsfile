pipeline {
    agent any

    environment {
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                dir('Backend') {
                    sh 'npm install'
                }
            }
        }

        stage('Unit Test') {
            steps {
                dir('Backend') {
                    script {
                        sh 'echo "No tests specified"'
                    }
                }
            }
        }

        stage('SonarQube Analysis') { 
            steps {
                script {  
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {  // Ajout du nom de la config SonarQube
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=piweb \
                        -Dsonar.projectName=Piweb
                        """
                    }
                } 
            }  
        }

        stage('Build Application') {
            steps {
                dir('Backend') {
                    script {
                        sh 'chmod +x node_modules/.bin/webpack'
                        sh 'npm run build-dev'
                    }
                }
            }
        }

        stage('Building images') {
            steps {
                dir('Backend') {
                    script {
                        sh 'docker-compose build'
                    }
                }
            }
        }

        stage('Deploy to Nexus') {  
            steps {  
                script {  
                    docker.withRegistry("http://${registry}", registryCredentials) {  
                        sh 'docker push ${registry}/piwebapp:6.0'
                    }  
                }  
            }  
        }

        stage('Run application') {
            steps {
                dir('Backend') {
                    script {
                        docker.withRegistry("http://${registry}", registryCredentials) {
                            sh 'docker pull ${registry}/piwebapp:6.0'
                            sh 'docker-compose up -d'
                        }
                    }
                }
            }
        }

        stage('Run Prometheus') {
            steps {
                dir('Backend') {
                    script {
                        sh 'docker start prometheus'
                    }
                }
            }
        }

        stage('Run Grafana') {
            steps {
                dir('Backend') {
                    script {
                        sh 'docker start grafana'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
